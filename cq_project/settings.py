"""
Django settings for cq_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%l39j6q&61)6^2v04-g#-gq-g-+=@6$a&$*kzhqj224a8hjwk#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['cq.ponzi.com','80.211.4.179']
CSRF_TRUSTED_ORIGINS = ["http://80.211.4.179:8000"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
     # ----- Sicurezza extra -----
    'axes', # django-axes per bloccare gli ip dopo ripetuti tentativi di login falliti
    # ----- OTP / 2-Factor -----
    "django_otp",                       # <– core otp
    "django_otp.plugins.otp_static",    # token statici di backup
    "django_otp.plugins.otp_totp",      # TOTP (Google Authenticator)
    "django_otp.plugins.otp_email",     # <– **manca la tabella incriminata**
    "two_factor",                       # workflow 2FA l'app 2FA
    'two_factor.plugins.email',         # invio via email 
    # ----- altro -----
    'widget_tweaks',
    # ----- Le tue app -----
    'django_extensions',
    'controlloqualita',
]

MIDDLEWARE = [
    'axes.middleware.AxesMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cq_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
                 BASE_DIR / "templates",     #  ← deve esserci
                ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',# <–– gestisce fusi orari
                
                
            ],
        },
    },
]

WSGI_APPLICATION = 'cq_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'cq_project_db',      # Nome del database creato in MySQL
        'USER': 'cq_user',            # Utente creato per il database
        'PASSWORD': 'controlloQualita_2025',# La password impostata per l’utente
        'HOST': 'localhost',
        'PORT': '3306',
        # Opzionale: altre opzioni, ad esempio per le connessioni SSL o settaggi di encoding
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'it-IT'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_ROOT = "/data/cqenv/cq_project/static"
MEDIA_ROOT = "/data/cqenv/cq_project/media"
STATIC_URL = 'static/'
MEDIA_URL = "/media/"

TWO_FACTOR_PATCH_ADMIN = True
LOGIN_URL = 'two_factor:login'
LOGOUT_REDIRECT_URL = 'two_factor:login'
LOGIN_REDIRECT_URL = 'controlloqualita:dashboard'




STATICFILES_DIRS = [
    BASE_DIR / 'controlloqualita',
    # … eventuali altri percorsi …
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#======================
#  gestione sessioni
#======================
# Durata massima di una sessione (in secondi): 4 ore = 4 * 3600
SESSION_COOKIE_AGE = 4 * 3600
# rinnovo della sessione ad ogni request (sliding expiration)
SESSION_SAVE_EVERY_REQUEST = True
# Per chiudere la sessione alla chiusura del browser, anche
# se non sono passate 4h
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# per maggior sicurezza, forzo i cookie di sessione e CSRF ad andare solo via HTTPS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE    = True

# imposto HttpOnly sul cookie di sessione - il cookie non è accessibile via JavaScript (protezione XSS)
SESSION_COOKIE_HTTPONLY = True

#======================
#  gestione blocco tentativi accesso falliti
#======================
AUTHENTICATION_BACKENDS = [
    # 1) backend standalone di Axes (controlla tentativi falliti)
    "axes.backends.AxesStandaloneBackend",
    # 2) backend predefinito di Django (necessario!)
    "django.contrib.auth.backends.ModelBackend",
]

AXES_LOCK_OUT_BY_COMBINATION = True

AXES_FAILURE_LIMIT        = 5            # tentativi prima del blocco
AXES_COOLOFF_TIME         = 1            # ore di “raffreddamento” / blocco
AXES_LOCKOUT_CALLABLE     = None         # puoi definire una funzione custom
AXES_RESET_ON_SUCCESS     = True         # azzera il contatore se login OK
AXES_ONLY_ADMIN_SITE      = False        # blocca anche il front-end
AXES_LOCK_OUT_AT_FAILURE  = True
AXES_VERBOSE              = False        # metti True per debug

#======================
#  gestione 2FA
#======================
TWO_FACTOR_SETUP_REQUIRED = True            # forza il wizard di setup
TWO_FACTOR_REMEMBER_COOKIE_AGE = 3600 * 4   # 4 h: stesso timeout sessione

# 100 MiB = 100 * 1024 * 1024
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600   # per i POST generici
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600   # per i <input type="file">
